package cep;

import antlr.FlinkCEPLexer;
import antlr.FlinkCEPParser;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.apache.flink.cep.pattern.Pattern;

public class FlinkCEPQueryParser {
    public static void main(String[] args) throws Exception {
        // Input string: this string should be a string in the specified grammar in ANTLR, describing the query
        String inputPattern = "begin ip_address == \"192.168.0.1\" within(Time.seconds(10))\n";

        // Create Lexer and Parser (generated by ANTLR)
        CharStream input = CharStreams.fromString(inputPattern);
        FlinkCEPLexer lexer = new FlinkCEPLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        FlinkCEPParser parser = new FlinkCEPParser(tokens);

        // Parsing the input, obtaining the AST
        ParseTree tree = parser.pattern();
        System.out.println("Albero Sintattico: " + tree.toStringTree(parser));

        // From AST to FLink CEP pattern, using the Visitor just created
        FlinkCEPVisitor visitor = new FlinkCEPVisitor();
        Pattern<Event, ?> flinkPattern = visitor.visit(tree);

        // Print generated pattern in CEP
        System.out.println("Pattern Flink CEP generato: " + flinkPattern);
    }
}
